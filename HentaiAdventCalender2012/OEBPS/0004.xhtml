<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8" />
<title>day03</title>
<link rel="stylesheet" href="css/default.css" type="text/css" />
</head>
<body>
<h3>day03</h3>
<h1>ノムリッシュJavaで厨二プログラミングAdd Star</h1><br/>
<br/>
汝の魂に語りかけようと試みる！（訳：こんにちは！）<br/>
<br/>
これは<a href="http://atnd.org/events/33835">HENTAI Advent Calendar 2012 - 変態アドベントカレンダー</a> -の三日目です。昨日は<a href="http://twitter.com/dproject21">@dproject21</a>さんの<a href="http://d.hatena.ne.jp/dproject21/20121201/1354374533">変態ライトニングトーカーが編み出したプレゼンメイキング手法</a>でした。明日は<a href="http://twitter.com/Kuchitama">@Kuchitama</a>さんです。<br/>
<br/>
<h2>厨二プログラミングとは</h2><br/>
<br/>
変数やメソッドの名前をカッコ良くしてソースコードをファンタジックに彩るプログラミングスタイルです。ということにします。<br/>
<br/>
<h2>パブリック・スタティック・ヴォイド・メイン</h2><br/>
<br/>
カタカナで書くと何もせずに厨二ライクな素晴らしいエントリーポイントですね。<br/>
<br/>
<h2>em.remove(entity)</h2><br/>
<br/>
JPAでエンティティをサクッと消す場合はEntityManagerのremoveメソッドを使いますが、これではノムリッシュではありませんね？<br/>
<br/>
こういう場合はラッパークラスを作成すると良いでしょう。例えばIfreetというクラスを作成し、infernoというメソッドを定義します。そしてその中でremoveを呼ぶようにしておきます。するとどうでしょう、<br/>
<br/>
<figure id="code3-1"><pre><code class="jpa">
Ifreet ifreet = ...
ifreet.inferno(entity);
</code></pre></figure>
<br/>
イフリートがエンティティにインフェルノを喰らわせてPersistence Contextから吹き飛ばしたではありませんか！<br/>
<br/>
さらに大量のエンティティを削除するにはイフリートでは心許ないかもしれません。そういうときはBahamutクラスを作成して、megaFlareメソッドを定義しましょう。<br/>
<br/>
<figure id="code3-2"><pre><code class="jpa">
Bahamut bahamut = ...
bahamut.megaFlare(entities);
</code></pre></figure>
<br/>
バハムートのメガフレアで一気にエンティティを消滅させるさまが容易に想像できますね？<br/>
<br/>
<h2>FINAL FANTASY</h2><br/>
<br/>
Fantasyというクラスを定義してfinalフィールドで使用するともうそれだけでファイナルファンタジーです。<br/>
<br/>
<figure id="code3-3"><pre><code class="jpa">
public class Fantasy {
    ...
}

...

final Fantasy VII = ...
</code></pre></figure>
<br/>
<h2>後始末メソッド</h2><br/>
<br/>
クラスや外部リソースの後始末を行うメソッドにはcloseやdestroyといった名前がよく使われます。destroyはまあまあカッコイイですが、closeは微妙ですね。そんな後始末におススメの名前はcatastropheです。カタストロフ。カタスいろふ。<br/>
<br/>
<h2>スタティック・イニシャライザー</h2><br/>
<br/>
カッコイイですね。インスタンス・イニシャライザーよりはスタティック・イニシャライザーの方が好みです。厨二的な意味で。<br/>
<br/>
<h2>ファイナライザー・ガーディアン</h2><br/>
<br/>
finalizeをオーバーライドしたときにスーパークラスのfinalizeが呼ばれなくなるようなバグの発生を防ぐためのイディオムです。名前がカッコよ過ぎますね。<br/>
<br/>
<h2>まとめ</h2><br/>
<br/>
伝説は、こうしてはじまる。すべての起こりは「石」だったのだと。<br/>
<br/>
命名やクラスセックェインに少し掌を加えるだけでムスミ＝カンソウと彼に仕えた騎士ないつの世ものコードがファンタジックに彩られたノムリッシュコードの『飼い主』にハヤガワ・リスしながら闇に還るだろう<br/>
<br/>
by <a href="http://racing-lagoon.info/nomu/translate.php">ノムリッシュ翻訳（Lv2）</a><br/>
<br/>
<h2>もとの文</h2><br/>
<br/>
命名やクラス設計に少し手を加えるだけで無味乾燥ないつものコードがファンタジックに彩られたノムリッシュコードに早変わりします<br/>
<br/>
適当かつ中途半端ですが、おしまい(・∀・)<br/>
<br/>

</body>
</html>

